using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using Microsoft.Speech.Recognition;
using System.Speech.Synthesis;
using System.Threading;
using System.Diagnostics;

namespace Clever2
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            sp.SelectVoice(Name = "IVONA 2 Ricardo");
            InitializeComponent();
        }
         
        public static SpeechRecognitionEngine reconhecimento = new SpeechRecognitionEngine(new System.Globalization.CultureInfo("pt-BR")); //instancia da classe de reconhecimento de voz, especificada em pt-br
        public static SpeechSynthesizer sp = new SpeechSynthesizer();

        private void Form1_Load(object sender, EventArgs e)
        {
            reconhecimento.SetInputToDefaultAudioDevice(); //define a saída de audio padrão
            string[] listaComandos = {"que horas são", "que dia é hoje", "crie um lembrete com dia",
                "configure um alarme", "crie um lembrete", "crie uma anotação",
                "quais são as atividades pendentes", "quais são as últimas notícias",
                "como está o clima", "abre o bloco de notas", "abre o google", "abre o excel",
                "abre o word", "abre o power point", "abre a calculadora", "você está dispensado"};

            Choices comandos = new Choices(listaComandos);

            GrammarBuilder gramatica_dos_comandos = new GrammarBuilder(); //cria uma relação entre o reconhecimento de voz e a gramática (array comandos)
            gramatica_dos_comandos.Append(comandos); //acrescenta as strings do array comandos à essa relação 

            Grammar pronuncia_dos_comandos = new Grammar(gramatica_dos_comandos); //cria um objeto para diferenciar a pronúncia entre as strings da relação gramatica_dos_comandos e outras relações vindouras
            pronuncia_dos_comandos.Name = "comandosGerais"; //define o nome do objeto



            reconhecimento.LoadGrammar(pronuncia_dos_comandos); //engine para reconhecer as palavras e pronúncias e carregar os objetos do tipo Grammar no objeto 
            reconhecimento.SpeechRecognized += rec; //quando a fala (entrada) for reconhecido
            reconhecimento.RecognizeAsync(RecognizeMode.Multiple); //para reconhecer vários comandos, e não apenas o primeiro (.Single)
            sp.SelectVoiceByHints(VoiceGender.Male);
        }
         

        


        private static void rec(object s, SpeechRecognizedEventArgs e) //aqui serão definidos os eventos, ou seja, oque cada comando por voz vai fazer
                                                                       //é isso oque o SpeechRecognizedEventArgs faz
        {
            if (e.Result.Confidence >= 0.4f) //representa a probabilidade de que o reconhecimento corresponda a uma determinada entrada.
            {
                string comando = e.Result.Text; //apresenta em forma de texto o comando dado por voz
                string tipoComando = e.Result.Grammar.Name;

                //talvez a parte principal, um switch-case para os comandos dados
                switch (tipoComando)
                {
                    case "comandosGerais":
                        executarComandosGerais(comando);
                        break;
                    default:
                        break;
                }
            }
            else
            {
                Speak("Não te ouvi direito, pode repetir?"); //frase padrão que o programa vai falar se ele não entender o comando dado (Confidence menor que 0.4)
            }
        }

        private static void executarComandosGerais(string pedido)
        {
            string[] mes = { "janeiro", "fevereiro", "março", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro" };

            switch (pedido)
            {
                case "que horas são":
                    Speak(DateTime.Now.ToString("HH" + "e" + "mm"));
                    break;

                case "que dia é hoje":
                    Speak(DateTime.Now.Day.ToString() + "de" + mes[DateTime.Now.Month - 1]);
                    break;

                case "crie um lembrete":
                    FormLembreteSimples ls = new FormLembreteSimples();
                    ls.ShowDialog();
                    break;

                case "crie um lembrete com dia":
                    Form2LembreteComDia lc = new Form2LembreteComDia();
                    lc.ShowDialog();
                    break;
                                    
                case "quais são as atividades pendentes":
                    Speak("Estou carregando o banco de dados");
                    Form4Pendentes fp = new Form4Pendentes();
                    fp.ShowDialog();
                    break;

                case "quais são as últimas notícias":
                    TestarConexao tc = new TestarConexao();
                    tc.CheckForInternetConnection();
                    FormNoticias fn = new FormNoticias();
                    fn.ShowDialog();
                    break;

                case "como está o clima":
                    TestarConexao tc2 = new TestarConexao();
                   // tc2.CheckForInternetConnection();
                    FormClima fc = new FormClima();
                    fc.ShowDialog();
                    break;

                case "configure um alarme":
                    Form3Acordar fa = new Form3Acordar();
                    fa.ShowDialog();
                    break;

                case "crie uma anotação":
                    FormAnotar anotar = new FormAnotar();
                    anotar.ShowDialog();
                    break;

                case "abre o bloco de notas":
                    ExecutarBlocodeNotas bloco = new ExecutarBlocodeNotas();
                    bloco.abrirPrograma();                    
                    break;

                case "abre o google":
                    ExecutarGoogle google = new ExecutarGoogle();
                    google.abrirPrograma();
                    break;

                case "abre o excel":
                    ExecutarExcel excel = new ExecutarExcel();
                    excel.abrirPrograma();
                    break;

                case "abre o word":
                    ExecutarWord word = new ExecutarWord();
                    word.abrirPrograma();
                    break;

                case "abre o power point":
                    ExecutarPowerPoint powerpoint = new ExecutarPowerPoint();
                    powerpoint.abrirPrograma();
                    break;

                case "abre a calculadora":
                    ExecutarCalculadora calculadora = new ExecutarCalculadora();
                    calculadora.abrirPrograma();
                    break;

                case "você está dispensado":
                    Speak("Até a próxima");
                    Application.Exit();
                    break;
            }
        }

        private static void Speak(string text) //Método da classe Speech.Synthesis que vai converter em fala a string passada
        {
            sp.SpeakAsyncCancelAll(); //faz o programa parar de falar
            sp.SpeakAsync(text);      //e passa a falar a nova frase programada para ser dita dependendo do comando dado
        }

    }
}
